mapWidgets={};mapWidgets.googleMapCallbacks=[];if(typeof django!=="undefined"&&django.jQuery){mapWidgets.jQuery=django.jQuery.noConflict()}else{mapWidgets.jQuery=jQuery.noConflict()}function googleMapWidgetsCallback(){window.addEventListener("load",event=>{for(let index=0;index<mapWidgets.googleMapCallbacks.length;index++){const widgetCallback=mapWidgets.googleMapCallbacks[index];new widgetCallback.class(widgetCallback.options)}})}(function($){let initializing=false,fnTest=/xyz/.test(function(){xyz})?/\bSuper\b/:/.*/;$.Class=function(){};$.Class.extend=function(prop){const Super=this.prototype;initializing=true;let prototype=new this;initializing=false;for(let name in prop){prototype[name]=typeof prop[name]=="function"&&typeof Super[name]=="function"&&fnTest.test(prop[name])?function(name,fn){return function(){let tmp=this.Super;this.Super=Super[name];const ret=fn.apply(this,arguments);this.Super=tmp;return ret}}(name,prop[name]):prop[name]}function Class(){if(!initializing&&this.init){this.init.apply(this,arguments)}}Class.prototype=prototype;Class.constructor=Class;Class.extend=arguments.callee;return Class};if(typeof Function.bind==="undefined"){Function.prototype.bind=function(obj){const method=this;tmp=function(){return method.apply(obj,arguments)};return tmp}}if(!Array.indexOf){Array.prototype.indexOf=function(obj){for(let i=0;i<this.length;i++){if(this[i]==obj){return i}}return-1}}})(mapWidgets.jQuery);(function($){DjangoMapWidgetBase=$.Class.extend({init:function(options){$.extend(this,options);this.coordinatesOverlayToggleBtn.on("click",this.toggleCoordinatesOverlay.bind(this));this.coordinatesOverlayDoneBtn.on("click",this.handleCoordinatesOverlayDoneBtnClick.bind(this));this.coordinatesOverlayInputs.on("change",this.handleCoordinatesInputsChange.bind(this));this.addMarkerBtn.on("click",this.handleAddMarkerBtnClick.bind(this));this.myLocationBtn.on("click",this.handleMyLocationBtnClick.bind(this));this.deleteBtn.on("click",this.resetMap.bind(this));if($(this.wrapElemSelector).closest(".module.collapse").length){$(document).on("show.fieldset",this.initializeMap.bind(this))}this.initializeMap.bind(this)();this.djangoInput.data("mwMapObj",this.map);this.djangoInput.data("mwClassObj",this)},initializeMap:function(){console.warn("Implement initializeMap method.")},updateMap:function(lat,lng){console.warn("Implement updateMap method.")},addMarkerToMap:function(lat,lng){console.warn("Implement this method for your map js library.")},fitBoundMarker:function(){console.warn("Implement this method for your map js library.")},removeMarker:function(){console.warn("Implement this method for your map js library.")},dragMarker:function(e){console.warn("Implement dragMarker method.")},handleMapClick:function(e){console.warn("Implement handleMapClick method.")},handleAddMarkerBtnClick:function(e){console.warn("Implement handleAddMarkerBtnClick method.")},isInt:function(value){return!isNaN(value)&&parseInt(Number(value))===value&&!isNaN(parseInt(value,10))},serializeMarkerToGeoJSON:function(){console.warn("Implement serializeMarkerToGeoJSON method.")},callPlaceTriggerHandler:function(lat,lng,place){},enableClearBtn:function(){this.deleteBtn.removeClass("mw-btn-default disabled").addClass("mw-btn-danger")},disableClearBtn:function(){this.deleteBtn.removeClass("mw-btn-danger").addClass("mw-btn-default disabled")},updateDjangoInput:function(place){const django_input_val=this.serializeMarkerToGeoJSON();const lng=django_input_val.coordinates[0];const lat=django_input_val.coordinates[1];this.djangoInput.val(JSON.stringify(django_input_val));this.updateUXCoordinatesInputs(lat,lng);this.callPlaceTriggerHandler(lat,lng,place);this.djangoGeoJSONValue={lng:lng,lat:lat};this.enableClearBtn()},resetMap:function(){if(!$.isEmptyObject(this.djangoGeoJSONValue)){this.hideOverlay();this.djangoInput.val("");this.coordinatesOverlayInputs.val("");$(this.addressAutoCompleteInput).val("");this.addMarkerBtn.removeClass("active");this.removeMarker();this.disableClearBtn();$(document).trigger(this.markerDeleteTriggerNameSpace,[this.djangoGeoJSONValue.lat,this.djangoGeoJSONValue.lng,this.wrapElemSelector,this.djangoInput]);this.djangoGeoJSONValue=null}},toggleCoordinatesOverlay:function(){this.coordinatesOverlayToggleBtn.toggleClass("active");$(".mw-coordinates-overlay",this.wrapElemSelector).toggleClass("hide")},updateUXCoordinatesInputs:function(lat,lng){$(".mw-overlay-latitude",this.wrapElemSelector).val(lat||"");$(".mw-overlay-longitude",this.wrapElemSelector).val(lng||"")},handleCoordinatesInputsChange:function(e){var lat=$(".mw-overlay-latitude",this.wrapElemSelector).val();var lng=$(".mw-overlay-longitude",this.wrapElemSelector).val();if(lat&&lng){this.addMarkerToMap(lat,lng);this.updateDjangoInput();this.fitBoundMarker()}},handleCoordinatesOverlayDoneBtnClick:function(){$(".mw-coordinates-overlay",this.wrapElemSelector).addClass("hide");this.coordinatesOverlayToggleBtn.removeClass("active")},handleMyLocationBtnClick:function(){this.showOverlay();if(navigator.geolocation){navigator.geolocation.getCurrentPosition(this.handleCurrentPosition.bind(this),this.handlecurrentPositionError.bind(this))}else{this.handlecurrentPositionError()}},handleCurrentPosition:function(location){this.addMarkerToMap(location.coords.latitude,location.coords.longitude);this.updateDjangoInput();this.hideOverlay();this.fitBoundMarker()},handlecurrentPositionError:function(){this.hideOverlay();alert("Your location could not be found.")},showOverlay:function(){this.loaderOverlayElem.removeClass("hide")},hideOverlay:function(){this.loaderOverlayElem.addClass("hide")}})})(mapWidgets.jQuery);(function($){DjangoGooglePointFieldWidget=DjangoMapWidgetBase.extend({initializeMap:async function(){const setMapOptions=async()=>{let mapInitializeOptions={mapId:this.mapId,zoomControlOptions:{position:google.maps.ControlPosition.RIGHT}};console.log("Initial mapOptions for instance",this.mapId,":",this.mapOptions);mapInitializeOptions=$.extend({},mapInitializeOptions,this.mapOptions);let mapCenter=mapInitializeOptions.center;if(!(mapCenter instanceof google.maps.LatLng)&&Array.isArray(mapCenter)){mapCenter=new google.maps.LatLng(mapCenter[0],mapCenter[1])}if(this.mapCenterLocationName){try{const response=await new Promise((resolve,reject)=>{this.geocoder.geocode({address:this.mapCenterLocationName},(results,status)=>{if(status===google.maps.GeocoderStatus.OK){resolve(results)}else{reject(status)}})});const geo_location=response[0].geometry.location;mapCenter=new google.maps.LatLng(geo_location.lat(),geo_location.lng())}catch(error){console.error("Geocode lookup failed for `mapCenterLocationName` option:",error)}}mapInitializeOptions["center"]=mapCenter;console.log("Final mapInitializeOptions for instance",this.mapId,":",mapInitializeOptions);return mapInitializeOptions};this.geocoder=new google.maps.Geocoder;const mapOptions=await setMapOptions();console.log("mapOptions returned by setMapOptions for instance",this.mapId,":",mapOptions);this.map=new google.maps.Map(this.mapElement,mapOptions);if(!$.isEmptyObject(this.djangoGeoJSONValue)){this.addMarkerToMap(this.djangoGeoJSONValue.lat,this.djangoGeoJSONValue.lng);this.updateDjangoInput();this.fitBoundMarker()}this.initializePlaceAutocomplete()},initializePlaceAutocomplete:function(){this.autocomplete=new google.maps.places.Autocomplete(this.addressAutoCompleteInput,this.GooglePlaceAutocompleteOptions);this.autocomplete.bindTo("bounds",this.map);this.autocomplete.addListener("place_changed",this.handleAutoCompletePlaceChange.bind(this,this.autocomplete));this.addressAutoCompleteInput.addEventListener("keydown",this.handleAutoCompleteInputKeyDown.bind(this))},addMarkerToMap:function(lat,lng){this.removeMarker();const marker_position={lat:parseFloat(lat),lng:parseFloat(lng)};this.marker=new google.maps.marker.AdvancedMarkerElement({map:this.map,position:marker_position,gmpDraggable:true});this.marker.addListener("dragend",this.dragMarker.bind(this))},serializeMarkerToGeoJSON:function(){if(this.marker){const position=this.marker.position;return{type:"Point",coordinates:[position.lng,position.lat]}}},fitBoundMarker:function(){const bounds=new google.maps.LatLngBounds;bounds.extend(this.marker.position);this.map.fitBounds(bounds);if(this.markerFitZoom&&this.isInt(this.markerFitZoom)){const markerFitZoom=parseInt(this.markerFitZoom);const listener=google.maps.event.addListener(this.map,"idle",function(){if(this.getZoom()>markerFitZoom){this.setZoom(markerFitZoom)}google.maps.event.removeListener(listener)})}},removeMarker:function(e){if(this.marker){this.marker.setMap(null)}this.marker=null},dragMarker:function(e){this.addMarkerToMap(e.latLng.lat(),e.latLng.lng());this.updateDjangoInput()},handleAutoCompletePlaceChange:function(autocomplete){const place=autocomplete.getPlace();if(!place.geometry){return}const lat=place.geometry.location.lat();const lng=place.geometry.location.lng();this.addMarkerToMap(lat,lng);this.updateDjangoInput(place);this.fitBoundMarker()},handleAutoCompleteInputKeyDown:function(e){const keyCode=e.keyCode||e.which;if(keyCode===13){e.preventDefault();return false}},handleAddMarkerBtnClick:function(e){$(this.mapElement).toggleClass("click");this.addMarkerBtn.toggleClass("active");if($(this.addMarkerBtn).hasClass("active")){this.map.addListener("click",this.handleMapClick.bind(this))}else{google.maps.event.clearListeners(this.map,"click")}},handleMapClick:function(e){google.maps.event.clearListeners(this.map,"click");$(this.mapElement).removeClass("click");this.addMarkerBtn.removeClass("active");this.addMarkerToMap(e.latLng.lat(),e.latLng.lng());this.updateDjangoInput()},callPlaceTriggerHandler:function(lat,lng,place){if(place===undefined){var latlng={lat:parseFloat(lat),lng:parseFloat(lng)};this.geocoder.geocode({location:latlng},function(results,status){if(status===google.maps.GeocoderStatus.OK){var placeObj=results[0]||{};$(this.addressAutoCompleteInput).val(placeObj.formatted_address||"");$(document).trigger(this.placeChangedTriggerNameSpace,[placeObj,lat,lng,this.wrapElemSelector,this.djangoInput]);if($.isEmptyObject(this.djangoGeoJSONValue)){$(document).trigger(this.markerCreateTriggerNameSpace,[placeObj,lat,lng,this.wrapElemSelector,this.djangoInput])}else{$(document).trigger(this.markerChangeTriggerNameSpace,[placeObj,lat,lng,this.wrapElemSelector,this.djangoInput])}}}.bind(this))}else{$(document).trigger(this.placeChangedTriggerNameSpace,[place,lat,lng,this.wrapElemSelector,this.djangoInput])}}})})(mapWidgets.jQuery);